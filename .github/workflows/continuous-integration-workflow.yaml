name: Continuous integration
on: [push, pull_request]

jobs:
    build-unixes:
        name: Build Unixes
        runs-on: ${{ matrix.variant.os }}
        strategy:
            matrix:
                variant:
                    - os: ubuntu-18.04
                      appname: Pharo
                      vmExecutable: pharo
                    - os: ubuntu-18.04
                      appname: GToolkit
                      vmExecutable: gtoolkit
                    - os: macos-latest
                      appname: Pharo
                      vmExecutable: pharo
                    - os: macos-latest
                      appname: GToolkit
                      vmExecutable: GToolkit
        env:
            APPNAME: ${{matrix.variant.appname}}
            VM_EXECUTABLE_NAME: ${{ matrix.variant.vmExecutable }}
            CERT: ${{ secrets.certificate }}
            SIGNING_IDENTITY: 'Developer ID Application: feenk gmbh (77664ZXL29)'
        steps:
            - name: Install dependencies
              if: matrix.variant.os == 'ubuntu-18.04'
              run: |
                sudo apt-get update
                sudo apt-get install uuid-dev

            - uses: actions/checkout@v1

            - name: CMake configuration
              run: |
                mkdir -p build
                cd build
                cmake .. -DAPPNAME=$APPNAME -DVM_EXECUTABLE_NAME=$VM_EXECUTABLE_NAME

            - name: make
              run: cd build && make
            - name: make install
              run: cd build && make install

            - name: Package artifacts
              run: |
                cd build
                make package
                mkdir -p ../artifacts
                cp -f build/packages/*.zip build/packages/*.sha1 ../artifacts
            - name: Upload artifacts
              uses: actions/upload-artifact@v1
              with:
                  name: build-artifacts
                  path: artifacts

            - name: Run tests
              continue-on-error: true
              run: scripts/runTests.sh
            - name: Upload test results
              continue-on-error: true
              uses: actions/upload-artifact@v1
              with:
                  name: test-results
                  path: test-results

    build-windows-cygwin:
        name: Build Windows Cygwin
        runs-on: windows-2016
        strategy:
            matrix:
                variant:
                    - appname: Pharo
                      vmExecutable: Pharo
                    - appname: GToolkit
                      vmExecutable: GToolkit
        env:
            APPNAME: ${{matrix.variant.appname}}
            VM_EXECUTABLE_NAME: ${{ matrix.variant.vmExecutable }}
        steps:
            - uses: actions/checkout@v1

            - name: Install Cygwin
              run: .\scripts\installCygwin.ps1 "setup-x86_64.exe" x86_64

            - name: CMake configuration
              run: |
                mkdir -p build
                cd build
                cmake .. -DAPPNAME=$APPNAME -DVM_EXECUTABLE_NAME=$VM_EXECUTABLE_NAME
              shell: pwsh.exe -File .\scripts\runScriptInCygwinBash.ps1 {0}

            - name: make
              run: cd build && make
              shell: pwsh.exe -File .\scripts\runScriptInCygwinBash.ps1 {0}
            - name: make install
              run: cd build && make install
              shell: pwsh.exe -File .\scripts\runScriptInCygwinBash.ps1 {0}

            - name: Package artifacts
              run: |
                cd build
                make package
                mkdir -p ../artifacts
                cp -f build/packages/*.zip build/packages/*.sha1 ../artifacts
              shell: pwsh.exe -File .\scripts\runScriptInCygwinBash.ps1 {0}

            - name: Upload artifacts
              uses: actions/upload-artifact@v1
              with:
                  name: build-artifacts
                  path: artifacts

            - name: Run tests
              continue-on-error: true
              run: scripts/runTests.sh
              shell: pwsh.exe -File .\scripts\runScriptInCygwinBash.ps1 {0}

            - name: Upload test results
              continue-on-error: true
              uses: actions/upload-artifact@v1
              with:
                  name: test-results
                  path: test-results
    upload-release:
        needs: [build-unixes, build-windows-cygwin]
        name: Upload released artifacts
        runs-on: ubuntu-18.04     
        env:
          RELEASETAG: date +'%Y.%m.%d-%H:%M:%S'      
        steps:
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1.0.0
              env:
                GITHUB_TOKEN: ${{ secrets.ACTIONS }}
              with:
                tag_name: v-${{ github.sha }}
                release_name: Release ${{ github.sha }}
                draft: false
                prerelease: false
            
            - uses: actions/download-artifact@v1
              with:
                name: build-artifacts

            - name: Create zip for upload
              run: zip -qyr build-artifacts.zip build-artifacts
              
            - name: Upload Release Asset
              id: upload-release-asset 
              uses: actions/upload-release-asset@v1.0.1
              env:
                GITHUB_TOKEN: ${{ secrets.ACTIONS }}
              with:
                upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
                asset_path: build-artifacts.zip
                asset_name: build-artifacts.zip
                asset_content_type: application/zip
            - name: Trigger GToolkit job
              uses: appleboy/jenkins-action@master
              with:
                url: "https://jenkins.feenk.com/"
                user: "georgeganea@gmail.com"
                token: ${{ secrets.JENKINS_TOKEN }}
                job: "feenkcom/gtoolkit/master"

name: Continuous integration
on: [push, pull_request]

jobs:
    build-unixes:
        name: Build VM
        runs-on: ${{ matrix.variant.os }}
        strategy:
            matrix:
                variant:
                    - os: ubuntu-18.04
                      appname: Pharo
                      vmExecutable: pharo
                      shell: bash
                    - os: ubuntu-18.04
                      appname: GToolkit
                      vmExecutable: gtoolkit
                      shell: bash
                    - os: macos-latest
                      appname: Pharo
                      vmExecutable: pharo
                      shell: bash
                    - os: macos-latest
                      appname: GToolkit
                      vmExecutable: GToolkit
                      shell: bash
                    - os: windows-2016
                      appname: GToolkit
                      vmExecutable: GToolkit
                      shell: pwsh.exe -File .\scripts\runScriptInCygwinBash.ps1 {0}
        env:
            APPNAME: ${{matrix.variant.appname}}
            VM_EXECUTABLE_NAME: ${{ matrix.variant.vmExecutable }}
        steps:
            - name: Install linux dependencies
              if: matrix.variant.os == 'ubuntu-18.04'
              run: sudo apt-get install uuid-dev

            - name: Install Cygwin
              if: matrix.variant.os == 'windows-2016'
              run: .\scripts\installCygwin.ps1 "setup-x86_64.exe" x86_64

            - uses: actions/checkout@v1

            - name: CMake configuration
              shell: ${{ matrix.variant.shell}}
              run: |
                mkdir -p build
                cd build
                cmake .. -DAPPNAME=$APPNAME -DVM_EXECUTABLE_NAME=$VM_EXECUTABLE_NAME

            - name: make
              shell: ${{ matrix.variant.shell}}
              run: cd build && make
            - name: make install
              shell: ${{ matrix.variant.shell}}
              run: cd build && make install

            - name: Package artifacts
              shell: ${{ matrix.variant.shell}}
              run: |
                cd build
                make package
                mkdir -p ../artifacts
                cp -f build/packages/*.zip build/packages/*.sha1 ../artifacts
            - name: Upload artifacts
              uses: actions/upload-artifact@v1
              with:
                  name: build-artifacts
                  path: artifacts

            - name: Run tests
              continue-on-error: true
              shell: ${{ matrix.variant.shell}}
              run: scripts/runTests.sh
            - name: Upload test results
              continue-on-error: true
              uses: actions/upload-artifact@v1
              with:
                  name: test-results
                  path: test-results
